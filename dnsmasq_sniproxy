#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

[[ $EUID -ne 0 ]] && echo -e "[${red}Error${plain}] 请使用root用户来执行脚本!" && exit 1

disable_selinux(){
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

check_sys(){
    local checkType=$1
    local value=$2

    local release=''
    local systemPackage=''

    if [[ -f /etc/redhat-release ]]; then
        release="centos"
        systemPackage="yum"
    elif grep -Eqi "debian|raspbian" /etc/issue; then
        release="debian"
        systemPackage="apt"
    elif grep -Eqi "ubuntu" /etc/issue; then
        release="ubuntu"
        systemPackage="apt"
    elif grep -Eqi "centos|red hat|redhat" /etc/issue; then
        release="centos"
        systemPackage="yum"
    elif grep -Eqi "debian|raspbian" /proc/version; then
        release="debian"
        systemPackage="apt"
    elif grep -Eqi "ubuntu" /proc/version; then
        release="ubuntu"
        systemPackage="apt"
    elif grep -Eqi "centos|red hat|redhat" /proc/version; then
        release="centos"
        systemPackage="yum"
    fi

    if [[ "${checkType}" == "sysRelease" ]]; then
        if [ "${value}" == "${release}" ]; then
            return 0
        else
            return 1
        fi
    elif [[ "${checkType}" == "packageManager" ]]; then
        if [ "${value}" == "${systemPackage}" ]; then
            return 0
        else
            return 1
        fi
    fi
}

get_ip(){
    local IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )
    echo ${IP}
}

get_ipv6(){
    local IPv6=$(ip -6 addr | awk '/inet6.*global/{ print $2}' | awk -F'/' '{print $1}' | head -n 1)
    [ -z ${IPv6} ] && IPv6=$(wget -qO- -t1 -T2 ipv6.icanhazip.com)
    echo ${IPv6}
}

check_ip(){
    local checkip=$1   
    local valid_check=$(echo $checkip|awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print "yes"}')   
    if echo $checkip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" >/dev/null; then   
        if [ ${valid_check:-no} == "yes" ]; then   
            return 0   
        else   
            echo -e "[${red}Error${plain}] IP $checkip not available!"   
            return 1   
        fi   
    else   
        echo -e "[${red}Error${plain}] IP format error!"   
        return 1   
    fi
}

check_ipv6(){
    local checkip=$1
    if [[ $checkip =~ '^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$' ]]; then
        return 0
    else
        echo -e "[${red}Error${plain}] IPv6 format error!"
        return 1
    fi
}

download(){
    local filename=${1}
    echo -e "[${green}Info${plain}] ${filename} download configuration now..."
    wget --no-check-certificate -q -t3 -T60 -O ${1} ${2}
    if [ $? -ne 0 ]; then
        echo -e "[${red}Error${plain}] Download ${filename} failed."
        exit 1
    fi
}

error_detect_depends(){
    local command=$1
    local depend=`echo "${command}" | awk '{print $4}'`
    echo -e "[${green}Info${plain}] Starting to install package ${depend}"
    ${command} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "[${red}Error${plain}] Failed to install ${red}${depend}${plain}"
        exit 1
    fi
}

config_firewall(){
    if check_sys packageManager yum; then
        systemctl status firewalld > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            default_zone=$(firewall-cmd --get-default-zone)
            firewall-cmd --permanent --zone=${default_zone} --add-service=dns
            firewall-cmd --permanent --zone=${default_zone} --add-service=http
            firewall-cmd --permanent --zone=${default_zone} --add-service=https
            firewall-cmd --reload
        else
            echo -e "[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable ports 53, 80, 443 manually if necessary."
        fi
    elif check_sys packageManager apt; then
        ufw allow 53/tcp
        ufw allow 53/udp
        ufw allow 80/tcp
        ufw allow 443/tcp
        ufw reload
    fi
}

install_dependencies(){
    if check_sys packageManager yum; then
        yum_depends=(
            epel-release curl wget net-tools
        )
        for depend in "${yum_depends[@]}"; do
            error_detect_depends "yum -y install ${depend}"
        done
    elif check_sys packageManager apt; then
        apt_depends=(
            curl wget net-tools
        )
        apt update
        for depend in "${apt_depends[@]}"; do
            error_detect_depends "apt -y install ${depend}"
        done
    fi
    echo -e "[${green}Info${plain}] Setting TimeZone to Shanghai"
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    date -s "$(curl -sI g.cn | grep Date | cut -d' ' -f3-6)Z"
}

install_dnsmasq(){
    if check_sys packageManager yum; then
        error_detect_depends "yum -y install dnsmasq"
    elif check_sys packageManager apt; then
        error_detect_depends "apt -y install dnsmasq"
    fi
    
    [ ! -f /etc/dnsmasq.conf ] && echo -e "[${red}Error${plain}] Dnsmasq installation failed, please check." && exit 1

    if [ ! -f /etc/dnsmasq.d ]; then
        mkdir -p /etc/dnsmasq.d
    fi
    
    cat > /etc/dnsmasq.d/custom_netflix.conf <<EOF
server=8.8.8.8
server=8.8.4.4
server=[2001:4860:4860::8888]
server=[2001:4860:4860::8844]
listen-address=127.0.0.1,${publicip},${publicipv6}
cache-size=81920
EOF

    download /tmp/proxy-domains.txt https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/proxy-domains.txt
    for domain in $(cat /tmp/proxy-domains.txt); do
        echo "address=/${domain}/${publicip}" >> /etc/dnsmasq.d/custom_netflix.conf
        echo "address=/${domain}/${publicipv6}" >> /etc/dnsmasq.d/custom_netflix.conf
    done

    if ! grep -q "conf-dir=/etc/dnsmasq.d" /etc/dnsmasq.conf; then
        echo "conf-dir=/etc/dnsmasq.d" >> /etc/dnsmasq.conf
    fi

    systemctl enable dnsmasq
    systemctl restart dnsmasq
    
    rm -f /tmp/proxy-domains.txt
    echo -e "[${green}Info${plain}] dnsmasq install complete..."
}

install_sniproxy(){
    if check_sys packageManager yum; then
        error_detect_depends "yum -y install epel-release"
        error_detect_depends "yum -y install sniproxy"
    elif check_sys packageManager apt; then
        error_detect_depends "apt -y install sniproxy"
    fi

    [ ! -f /etc/sniproxy.conf ] && echo -e "[${red}Error${plain}] SNI Proxy installation failed, please check." && exit 1

    cat > /etc/sniproxy.conf <<EOF
user daemon
pidfile /var/run/sniproxy.pid

error_log {
    syslog daemon
    priority notice
}

listen 80 {
    proto http
    table netflix
}

listen 443 {
    proto tls
    table netflix
}

table netflix {
    .* *
}
EOF

    if [ ! -d /var/log/sniproxy ]; then
        mkdir -p /var/log/sniproxy
    fi

    systemctl enable sniproxy
    systemctl restart sniproxy

    echo -e "[${green}Info${plain}] sniproxy install complete..."
}

install_check(){
    if check_sys packageManager yum || check_sys packageManager apt; then
        if centosversion 5; then
            return 1
        fi
        return 0
    else
        return 1
    fi
}

ready_install(){
    echo "检测您的系统..."
    if ! install_check; then
        echo -e "[${red}Error${plain}] Your OS is not supported to run it!"
        echo "Please change to CentOS 6+/Debian 8+/Ubuntu 16+ and try again."
        exit 1
    fi
    
    disable_selinux
    install_dependencies
    config_firewall
    echo -e "[${green}Info${plain}] Checking the system complete..."
}

install_all(){
    publicip=$(get_ip)
    publicipv6=$(get_ipv6)
    
    if [ -z "$publicip" ]; then
        echo -e "[${red}Error${plain}] Unable to get IPv4 address. Please check your network settings."
        exit 1
    fi
    
    if [ -z "$publicipv6" ]; then
        echo -e "[${yellow}Warning${plain}] Unable to get IPv6 address. The script will continue with IPv4 only."
    fi

    ready_install
    install_dnsmasq
    install_sniproxy

    echo ""
    echo -e "${yellow}Dnsmasq + SNI Proxy 已完成安装！${plain}"
    echo ""
    echo -e "${yellow}您可以使用以下DNS服务器地址：${plain}"
    echo -e "IPv4: ${green}${publicip}${plain}"
    if [ ! -z "$publicipv6" ]; then
        echo -e "IPv6: ${green}${publicipv6}${plain}"
    fi
    echo ""
}

uninstall_all(){
    echo -e "[${green}Info${plain}] Uninstalling dnsmasq and sniproxy..."
    
    systemctl stop dnsmasq
    systemctl disable dnsmasq
    if check_sys packageManager yum; then
        yum remove dnsmasq -y
    elif check_sys packageManager apt; then
        apt remove dnsmasq -y
    fi
    rm -rf /etc/dnsmasq.d

    systemctl stop sniproxy
    systemctl disable sniproxy
    if check_sys packageManager yum; then
        yum remove sniproxy -y
    elif check_sys packageManager apt; then
        apt remove sniproxy -y
    fi
    rm -f /etc/sniproxy.conf

    echo -e "[${green}Info${plain}] Uninstall complete."
}

# Main
if [ "$1" = "uninstall" ]; then
    uninstall_all
else
    install_all
fi
